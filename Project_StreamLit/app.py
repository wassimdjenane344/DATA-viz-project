# app.py
import streamlit as st
import pandas as pd
from utils.io import load_data
from utils.prep import clean_data, make_geodataframe
from utils.viz import bar_chart_dispo_commune, scatter_plot_capacite_vs_dispo, map_chart_dispo


st.set_page_config(
    page_title="Dispo V√©lib' - L'Histoire d'un Trajet", 
    layout="wide",
    initial_sidebar_state="expanded" 
)


df_raw = load_data()
if df_raw is None or df_raw.empty:
    st.error("√âchec du chargement des donn√©es initiales. V√©rifiez le fichier 'data/velib_data.json'.")
    st.stop() 

df_clean, data_quality_report = clean_data(df_raw)
if df_clean.empty:
    st.error("Aucune donn√©e valide n'a pu √™tre trait√©e apr√®s le nettoyage. V√©rifiez la structure du fichier JSON et le script de pr√©paration.")
    st.info(data_quality_report) 
    st.stop() 


st.title("üö≤ L'Odyss√©e V√©lib' : Trouver un v√©lo quand on en a besoin")
st.markdown("""
**Le Probl√®me : La station vide.** Qui n'a jamais v√©cu √ßa ? Fin de journ√©e, sortie de concert √† l'Accor Arena (Bercy), ou simple envie de rentrer... et l√†, la station V√©lib' la plus proche est d√©sesp√©r√©ment vide. üò© Ou pire, pleine √† craquer quand on veut *d√©poser* son v√©lo ! 

Cette application explore la disponibilit√© actuelle des V√©lib' pour comprendre o√π et quand les v√©los manquent ou abondent. L'objectif : transformer la frustration en anticipation et mieux planifier nos trajets.
""")
st.caption("Source: Donn√©es temps r√©el V√©lib' M√©tropole (via le fichier JSON fourni).") 


with st.sidebar:
    st.header("Filtres") 
    
   
    if not df_clean.empty:
        
        commune_list = ['Toutes']
        if 'Commune' in df_clean.columns:
            try:
               
                unique_communes = sorted(df_clean['Commune'].unique())
                commune_list.extend(unique_communes)
            except Exception as e:
                st.warning(f"Impossible de trier les communes: {e}")
                commune_list.extend(df_clean['Commune'].unique())
        
        commune_select = st.selectbox(
            "üìç O√π cherchez-vous ?",
            commune_list,
            index=0 
        ) 
        
        
        min_velos_dispo = 0
        max_val_velos = 10 
        if 'VelosDispoTotal' in df_clean.columns:
            try:
               max_val_velos = int(df_clean['VelosDispoTotal'].max())
               
               if max_val_velos < 0: max_val_velos = 0
            except ValueError:
                st.warning("Impossible de d√©terminer le max de v√©los disponibles, utilisation d'une valeur par d√©faut.")
                max_val_velos = 50 

            min_velos_dispo = st.slider(
                "Combien de v√©los au minimum ?",
                min_value=0,
                max_value=max_val_velos, 
                value=1 if max_val_velos >= 1 else 0, 
                step=1,
                help="Filtre les stations ayant AU MOINS ce nombre de v√©los disponibles."
            )
        else:
             st.warning("Colonne 'VelosDispoTotal' manquante, filtre d√©sactiv√©.")
             min_velos_dispo = 0 

        
        type_velo_options = ['Tous']
        if 'VelosMecaniques' in df_clean.columns: type_velo_options.append('M√©canique')
        if 'VelosElectriques' in df_clean.columns: type_velo_options.append('√âlectrique')

        
        type_velo_select = 'Tous'
        if len(type_velo_options) > 1:
            type_velo_select = st.radio(
                " Quel type de v√©lo ?",
                type_velo_options,
                index=0, 
                help="Certaines stations n'ont peut-√™tre que des v√©los m√©caniques ou √©lectriques."
            )
        else:
             st.info("Information sur le type de v√©lo non disponible.")
             type_velo_select = 'Tous' 
        
    else:
        st.warning("Impossible de charger les filtres, donn√©es manquantes ou invalides.")




df_filtered = df_clean.copy()
if 'Commune' in df_filtered.columns and commune_select != 'Toutes':
    df_filtered = df_filtered[df_filtered['Commune'] == commune_select]
if 'VelosDispoTotal' in df_filtered.columns:
    df_filtered = df_filtered[df_filtered['VelosDispoTotal'] >= min_velos_dispo]
if type_velo_select == 'M√©canique' and 'VelosMecaniques' in df_filtered.columns:
    df_filtered = df_filtered[df_filtered['VelosMecaniques'] > 0]
elif type_velo_select == '√âlectrique' and 'VelosElectriques' in df_filtered.columns:
    df_filtered = df_filtered[df_filtered['VelosElectriques'] > 0]


st.header(" La Situation Actuelle (selon vos filtres)")

if df_filtered.empty:
    st.warning(f"Malheureusement, aucune station ne correspond √† vos crit√®res (Commune: {commune_select}, Min. V√©los: {min_velos_dispo}, Type: {type_velo_select}).")
    
else:
    total_stations_filtrees = len(df_filtered)
    total_velos_dispo = df_filtered['VelosDispoTotal'].sum() if 'VelosDispoTotal' in df_filtered.columns else 0
    avg_taux_dispo = df_filtered['TauxDispo'].mean() if 'TauxDispo' in df_filtered.columns else 0.0

    c1, c2, c3 = st.columns(3) 
    with c1:
        st.metric("Stations trouv√©es", f"{total_stations_filtrees}") 
        st.caption("Nombre de stations r√©pondant √† vos crit√®res.")
    with c2:
        st.metric("V√©los disponibles (total)", f"{total_velos_dispo}") 
        st.caption(f"Total de v√©los ({type_velo_select if type_velo_select != 'Tous' else 'tous types'}) sur ces stations.")
    with c3:
        st.metric("Disponibilit√© moyenne", f"{avg_taux_dispo:.1f}%" if pd.notna(avg_taux_dispo) else "N/A") 
        st.caption("Pourcentage moyen de v√©los dispo par rapport √† la capacit√© des stations filtr√©es.")

    st.divider()

 

    st.subheader("üó∫Ô∏è O√π sont les v√©los ? La Carte !") 
    st.markdown("Visualisez la r√©partition g√©ographique. Les **grosses bulles vertes** sont vos meilleures amies ! Les **petites bulles rouges** indiquent une p√©nurie.")
    gdf_filtered = make_geodataframe(df_filtered) 
    if gdf_filtered is not None and not gdf_filtered.empty:
        map_chart_dispo(gdf_filtered) 
    else:
        st.warning("Impossible d'afficher la carte (pas de donn√©es g√©ographiques valides pour les filtres actuels).")

    st.divider()

    st.subheader("üßê Analyse D√©taill√©e")
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("**Capacit√© vs. Disponibilit√© : Est-ce qu'une grande station a toujours des v√©los ?**")
        if all(col in df_filtered.columns for col in ['CapaciteTotal', 'VelosDispoTotal', 'TauxDispo', 'NomStation', 'Commune']):
             scatter_chart = scatter_plot_capacite_vs_dispo(df_filtered)
             st.altair_chart(scatter_chart, use_container_width=True)
             st.info("""
             * **Points verts en haut √† droite** : Grandes stations bien remplies 
             * **Points rouges en bas** : Stations (grandes ou petites) presque vides 
             * **Points loin de la diagonale** : Indiquent un d√©s√©quilibre (tr√®s pleine ou tr√®s vide par rapport √† la capacit√©).
             """)
        else:
            st.warning("Donn√©es insuffisantes pour afficher ce graphique.")

    with col2:
        if commune_select == 'Toutes' and 'Commune' in df_filtered.columns:
            st.markdown("**Comparaison des Communes : O√π est-ce le plus facile (en moyenne) ?**")
            bar_chart = bar_chart_dispo_commune(df_filtered)
            st.altair_chart(bar_chart, use_container_width=True)
            st.info("""
            Ce classement peut varier √©norm√©ment ! Une commune avec beaucoup de gares ou de bureaux peut se vider le soir, tandis qu'une zone r√©sidentielle peut se remplir. 
            Les zones tr√®s touristiques ou proches de grands lieux (comme Bercy/Accor Arena apr√®s un √©v√©nement) peuvent aussi voir leur disponibilit√© chuter rapidement.
            """)
        elif commune_select != 'Toutes' and all(col in df_filtered.columns for col in ['NomStation', 'VelosDispoTotal', 'BornesLibres', 'TauxDispo']):
            st.markdown(f"**Zoom sur {commune_select} : Quelles stations choisir ?**")
            df_commune = df_filtered.sort_values(by='TauxDispo', ascending=False)
            display_cols_map = {
                'NomStation':'Station', 
                'VelosDispoTotal':'V√©los ', 
                'BornesLibres':'Places ', 
                'TauxDispo':'Dispo (%)'
            }
            display_cols = [display_cols_map[col] for col in display_cols_map if col in df_commune.columns]
            df_display = df_commune[[col for col in display_cols_map if col in df_commune.columns]].rename(columns=display_cols_map)
            
            if 'Station' in df_display.columns:
                df_display = df_display.set_index('Station')

            column_config = {}
            if 'Dispo (%)' in df_display.columns:
                column_config["Dispo (%)"] = st.column_config.ProgressColumn(
                        "Dispo (%)", format="%.1f%%", min_value=0, max_value=100,
                    )

            st.dataframe(df_display, column_config=column_config if column_config else None, height=300)
            st.info(" Triez par V√©los ou Places en cliquant sur l'en-t√™te. La barre 'Dispo (%)' donne une vue rapide.")
        else:
             st.info("S√©lectionnez 'Toutes' les communes pour la comparaison ou v√©rifiez les donn√©es.")

    st.divider()


with st.expander(" Qualit√© des Donn√©es & Limites de l'Analyse"):
    st.markdown("### Qualit√© des Donn√©es") 
    st.info(data_quality_report) 
    
    st.markdown("### Limites")
    st.warning("""
    - **Instantan√©it√© Volatile**: Les donn√©es V√©lib' changent √† chaque seconde ! Ce dashboard est une photo, pas un film. Rafra√Æchissez la page (F5) pour les donn√©es les plus r√©centes.
    - **Pas de Boule de Cristal**: On voit l'√©tat actuel, mais on ne pr√©dit pas si la station sera vide dans 10 minutes.
    - **Fiabilit√© des Capteurs**: L'analyse d√©pend de la pr√©cision des infos remont√©es par chaque station. Parfois, un v√©lo peut √™tre marqu√© disponible alors qu'il est d√©fectueux.
    """) 


st.header("üèÅ Ce qu'il faut retenir & Prochaines √âtapes")


if df_filtered.empty:
     conclusion_insight = "Vos filtres actuels ne retournent aucune station disponible."
     conclusion_recommendation = "Essayez de demander moins de v√©los minimum, d'√©largir la zone g√©ographique ou d'accepter tous les types de v√©los."
else:
     
     total_stations_filtrees = len(df_filtered) 
     type_texte = f"de type {type_velo_select.lower()}" if type_velo_select != 'Tous' else "tous types confondus"
     zone_texte = f"dans la commune de {commune_select}" if commune_select != 'Toutes' else "dans les zones s√©lectionn√©es"
     
     conclusion_insight = f"""
     **Votre recherche** ({pd.Timestamp.now(tz='Europe/Paris').strftime('%H:%M:%S')}) montre qu'il y a actuellement **{total_velos_dispo} v√©lo(s)** {type_texte} r√©partis sur **{total_stations_filtrees} station(s)** {zone_texte} r√©pondant √† vos crit√®res (au moins {min_velos_dispo} v√©lo(s) par station). 
     La disponibilit√© varie fortement : certaines zones (ou stations) sont bien fournies (vertes üü¢), tandis que d'autres sont sous tension (rouges üî¥). Une grande capacit√© n'est pas toujours synonyme de disponibilit√© !
     """
     conclusion_recommendation = "Avant de partir, jetez un ≈ìil rapide √† la **carte** pour visualiser les stations vertes üü¢ les plus proches de votre destination ou point de d√©part. Avoir une ou deux **stations de secours** en t√™te, surtout le soir ou pr√®s des zones d'√©v√©nements (gares, salles de spectacle...), peut vous sauver la mise !"

st.success(
    f"""
    **Insight Cl√©**: {conclusion_insight}
    
    **Conseil Pratique**: {conclusion_recommendation}
    
    **Pour aller plus loin**: L'id√©al serait d'analyser les donn√©es sur plusieurs jours/semaines pour voir s'il y a des **sch√©mas r√©currents** : quelles stations se vident syst√©matiquement √† 9h ? Lesquelles sont pleines le vendredi soir ? Cela permettrait d'anticiper encore mieux ! üîÆ
    """
)